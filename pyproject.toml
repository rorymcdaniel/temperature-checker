[tool.poetry]
name = "temperature-checker"
version = "0.1.0"
description = "Monitor outdoor temperature and send Telegram notifications for opening/closing windows"
authors = ["Rory McDaniel"]
readme = "README.md"
license = "MIT"
package-mode = false

[tool.poetry.dependencies]
python = "^3.8"
requests = "^2.31.0"
python-dotenv = "^1.0.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.0"
pytest-cov = "^4.1.0"
pytest-mock = "^3.11.0"
mypy = "^1.8.0"
types-requests = "^2.31.0"
ruff = "^0.12.7"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
testpaths = ["."]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--tb=short",
    "--strict-markers",
    "--disable-warnings",
    "--cov=temp_checker",
    "--cov=set_window_state", 
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-fail-under=94"
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests", 
    "utility: Utility script tests"
]

[tool.coverage.run]
source = ["."]
omit = [
    "test_*.py",
    "*/tests/*",
    "*/test/*",
    "__pycache__/*",
    "*.pyc"
]

[tool.mypy]
python_version = "3.8"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_any_generics = true
disallow_any_unimported = true
# Warn about Any usage but don't completely ban it
# disallow_any_expr = false  
# disallow_any_explicit = false
disallow_any_decorated = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
ignore_missing_imports = true
show_error_codes = true

[tool.ruff]
# Target Python 3.8+ compatibility
target-version = "py38"
line-length = 100

# Exclude directories and files
exclude = [
    ".git",
    "__pycache__",
    ".pytest_cache",
    ".venv",
    "htmlcov",
]

[tool.ruff.lint]
# Enable specific rule categories
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings  
    "F",    # Pyflakes
    "I",    # isort
    "N",    # pep8-naming
    "UP",   # pyupgrade
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "ICN",  # flake8-import-conventions
    "PIE",  # flake8-pie
    "PYI",  # flake8-pyi
    "RSE",  # flake8-raise
    "RET",  # flake8-return
    "SIM",  # flake8-simplify
    "PTH",  # flake8-use-pathlib
    "ERA",  # eradicate (commented code)
    "PL",   # Pylint
    "RUF",  # Ruff-specific rules
]

# Disable specific rules that are too strict for this project
ignore = [
    "E501",   # Line too long (we use line-length = 100)
    "PLR0913", # Too many arguments to function call
    "PLR2004", # Magic value used in comparison
    "RET504",  # Unnecessary variable assignment before return
    "SIM108",  # Use ternary operator instead of if-else
    "PTH123",  # open() is fine for simple file reading
]

[tool.ruff.lint.per-file-ignores]
# Test files can have additional flexibility
"test_*.py" = [
    "PLR0915", # Too many statements
    "PLR0912", # Too many branches
    "S101",    # Use of assert
]

[tool.ruff.lint.isort]
# Configure import sorting
force-single-line = false
known-first-party = ["temp_checker", "set_window_state"]

[tool.ruff.format]
# Use double quotes for strings
quote-style = "double"
# Indent with 4 spaces
indent-style = "space"